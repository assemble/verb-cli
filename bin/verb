#!/usr/bin/env node

/**
 * TODO: all of this... make it real good-like.
 */

// What's my name?
process.title = 'verb';

// Who do I depend on?
const path = require('path');
const file = require('fs-utils');
const configFile = require('config-file');
const inquirer = require('inquirer');
const relative = require('relative');
const Liftoff = require('liftoff');
const _ = require('lodash');

// Get your Verb on.
const verb = require('verb'); // TODO: remove since we're using local verbs
const meta = verb.verbMetadata;
const colors = verb.colors;


var localConfig = {};
var localDir = process.cwd();
var rc = '';

if (file.exists('.verbrc.yml')) {
  rc = '.verbrc.yml';
  localConfig = configFile.load(rc);
} else if (file.exists('.verbrc')) {
  rc = '.verbrc';
  localConfig = configFile.load(rc);
}

/**
 * Update Verb's `runner` metadata with info about the
 * current tool, e.g. `verb-cli`. Use in templates with
 * the `runner.name` and `runner.url` variables.
 *
 * This is useful for generating stuff like:
 *
 *   _Generated by [verb-cli](https://github.com/assemble/verb-cli), on X date_
 *
 * @api public
 */

verb.runner = {
  name: "verb-cli",
  url: 'https://github.com/assemble/verb-cli'
};

/**
 * Load the user's runtime config file
 * @param   {String} filename
 * @return  {Object} config object
 */

var runtimeConfig = function(cwd, filename) {
  var filepath = path.join(cwd, filename);
  return config.load(filepath);
};


/**
 * Logging messages
 */

var msg = {
  noTemplates: function(dir) {
    var text = [
      '[verb-cli]: templates in the ' + dir,
      'directory must have a `.tmpl.md` extension.',
      'Visit the Verb documentation to learn more >',
      'https://github.com/assemble/verb/'
    ].join(' ');
    return text;
  }
};

// If a verbfile.js exists, give that to liftoff,
// if not, use the runtime config instead.
var vf = file.exists('verbfile.js') ? 'verbfile' : rc;

var cli = new Liftoff({
  name: 'verb',
  configName: vf,
  addExtensions: ['rc', 'rc.yml', 'js'],
  preloadFlag: 'require',
  completionFlag: 'completion',
  completions: function (type) {
    verb.log('Completions not implemented.');
  }
});


cli.on('require', function (name, module) {
  if (name === 'coffee-script') {
    module.register();
  }
  verb.log('Requiring external module:', name);
});


cli.on('requireFail', function (name, err) {
  verb.log('Unable to require external module:', name, err);
});

cli.launch(handler);


function handler (env) {
  var argv = env.argv;
  var verbfile,
    localVerb;

  process.chdir(env.cwd);

  if (typeof env.configBase === 'undefined') {
    env.configBase = env.cwd;
  }

  var verbose = argv.v || argv.verbose;
  if (verbose) {
    verb.mode.verbose = true;
  }

  /**
   * Local verb > node_modules/verb
   */

  if (!env.modulePath) {
    verb.log.error('No local verb found in', verb.colors.yellow(env.cwd));
    verb.log.error('Please run: `npm install verb`');
    process.exit(1);
  }
  localVerb = require(env.modulePath);

  /**
   * Runtime config file
   * Used to supply metadata to the
   */

  localVerb.verbrc = localConfig;

  var opts = {
    ext: '.md', // dest extension
    cwd: env.configBase,
    prefixBase: true,
    destBase: argv.d || argv.dest || env.cwd,
    verbose: verbose || false,
  };

  /**
   * verfile.js / .verbrc / .verbrc.yml
   */

  var verbfile;
  if (env.configPath) {
    if(env.configPath.indexOf('.js') !== -1) {
      localVerb.log('Loading verbfile:', env.configPath);
      verbfile = require(env.configPath)(localVerb);
    } else if (env.configPath.indexOf('.verb') !== -1) {
      localVerb.log('Loading verb config:', env.configPath);
      verbfile = file.readDataSync(env.configPath);

      // Extend the default options with
      // the contents of the config file.
      _.extend(opts, verbfile);
    }

    // Skip the default task by defining `readme: false`
    if(verb.context.readme === false) {
      verb.log.runner('skipping', 'default task.');
      return;
    }
  }


  // Specify the docs dir with -d or -dir
  var dir = argv.s || argv.src || opts.docs;
  var docsBase = relative(env.configBase, dir || localVerb.docs);
  var docs = path.join(docsBase, '*.tmpl.md');


  /**
   * Default task.
   */

  // Task start
  verb.log.write();
  verb.log.subhead('scanning', docs);

  file.expand(docs, opts).map(function(filepath) {
    localVerb.init(opts);
    localVerb.options = localVerb.options || {};

    var name = file.base(filepath) + opts.ext;
    var dest = localVerb.cwd(opts.destBase, name);

    localVerb.options.src = filepath;
    localVerb.options.dest = dest;

    file.writeFileSync(dest, localVerb.read(filepath, opts));
    verb.log.run('writing', relative(env.configBase, dest));
  });

  // Log success messages
  verb.log.success('  Done');
}
