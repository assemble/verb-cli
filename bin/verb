#!/usr/bin/env node

process.title = 'verb';

const path = require('path');
const file = require('fs-utils');
const chalk = require('chalk');
const configFile = require('config-file');
const relative = require('relative');
const Liftoff = require('liftoff');
const _ = require('lodash');


var localConfig = {};
var rc = '';

if (file.exists('.verbrc.yml')) {
  rc = '.verbrc.yml';
  localConfig = configFile.load(rc);
} else if (file.exists('.verbrc')) {
  rc = '.verbrc';
  localConfig = configFile.load(rc);
}

/**
 * If a verbfile.js exists, give that to liftoff,
 * if not, use the runtime config instead.
 */

var vf = file.exists('verbfile.js') ? 'verbfile' : '.verb';


/**
 * Liftoff
 */

var cli = new Liftoff({
  name: 'verb',
  configName: vf,
  addExtensions: ['rc', 'rc.yml', 'js'],
  preloadFlag: 'require',
  completionFlag: 'completion',
  completions: function () {
    console.warn('Completions not implemented.');
  }
});


cli.on('require', function (name, module) {
  if (name === 'coffee-script') {
    module.register();
  }
  console.log('Requiring external module:', name);
});


cli.on('requireFail', function (name, err) {
  console.log('Unable to require external module:', name, err);
});


/**
 * Logging messages
 */

var msg = {
  noTemplates: function(dir) {
    var text = [
      '  verb-cli [skipping] Â· ' + chalk.gray('no templates found in \'' + dir + '\'.'),
      '                        ' + chalk.gray('verb-cli requires templates to have \'.tmpl.md\' extension.'),
      '                        ' + chalk.gray('Visit the verb-cli project to learn how to customize:'),
      '                        https://github.com/assemble/verb-cli'
    ].join('\n');
    return text;
  }
};



function handler (env) {
  var argv = env.argv,
    cliPackage = require('../package'),
    versionFlag = argv.v || argv.version,
    verbfile,
    verb;

  if (versionFlag) {
    console.log('  CLI version', cliPackage.version);
    if (env.modulePackage) {
      console.log('  Local version', env.modulePackage.version);
    }
    process.exit(0);
  }

  process.chdir(env.cwd);

  if (typeof env.configBase === 'undefined') {
    env.configBase = env.cwd;
  }

  /**
   * Local verb > node_modules/verb
   */

  if (!env.modulePath) {
    console.error(chalk.red('No local verb found in'), chalk.yellow(env.cwd));
    console.error(chalk.red('Please run: \'npm install verb\''));
    process.exit(1);
  }

  verb = require(env.modulePath);

  var verbose = argv.v || argv.verbose;
  if (verbose) {
    verb.mode.verbose = true;
  }

  /**
   * Runtime config file
   * Used to supply metadata to the
   */

  verb.verbrc = localConfig;

  var opts = {
    ext: '.md', // dest extension
    cwd: env.configBase,
    prefixBase: true,
    destBase: argv.d || argv.dest || env.cwd,
    verbose: verbose || false,
  };

  // var meta = verb.verb;
  // verb.log.write();
  // verb.log.subhead('Running Verb v', meta.version);

  /**
   * Update Verb's `runner` metadata with info about the
   * current tool, e.g. `verb-cli`. Use in templates with
   * the `runner.name` and `runner.url` variables.
   *
   * This is useful for generating stuff like:
   *
   *   _Generated by [verb-cli](https://github.com/assemble/verb-cli), on March 21, 2014._
   *
   * @api public
   */

  verb.runner = {
    name: "verb-cli",
    url: 'https://github.com/assemble/verb-cli'
  };

  /**
   * verfile.js / .verbrc / .verbrc.yml
   */

  if (env.configPath) {
    if(env.configPath.indexOf('.js') !== -1) {
      verb.log('\n  Loading verbfile:', env.configPath);
      verbfile = require(env.configPath)(verb);
    } else if (env.configPath.indexOf('.verb') !== -1) {
      verb.log('\n  Loading Verb config:', env.configPath);
      verbfile = file.readDataSync(env.configPath);

      // Extend the default options with
      // the contents of the config file.
      _.extend(opts, verbfile);
    }

    // Skip the default verb-cli task by defining `readme: false`
    if(verb.context && verb.context.readme === false) {
      verb.log.run('skipping', 'default task.');
      return;
    }
  }

  // Specify the docs dir with -d or -dir
  var dir = argv.s || argv.src || opts.docs;
  var docsBase = relative(env.configBase, dir || verb.docs);
  var docs = path.join(docsBase, '*.tmpl.md');


  /**
   * Default task.
   */

  // Task start
  verb.log.write();
  verb.log.subhead('reading', file.normalizeSlash(docs));

  var files = file.expand(docs, opts);

  if (!files.length) {
    verb.log.warn(msg.noTemplates(docsBase));
  } else {
    files.map(function(filepath) {
      verb.init(opts);
      verb.options = verb.options || {};

      var name = file.base(filepath) + opts.ext;
      var dest = verb.cwd(opts.destBase, name);

      verb.options.src = filepath;
      verb.options.dest = dest;

      file.writeFileSync(dest, verb.read(filepath, opts));
      verb.log.run('writing', relative(env.configBase, dest));
    });
  }

  // Log success messages
  verb.log.success('  verb-cli [done]');
  return;
}

cli.launch(handler);